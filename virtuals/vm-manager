#!/bin/bash
# VM Manager for Simple NFS Daemon
# Manages VMs in the virtuals/ directory structure
# Usage: ./vm-manager [command] [vm_name]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Available VMs
AVAILABLE_VMS=("ubuntu_dev" "centos_dev")

# Function to check VBoxHeadless availability
check_vboxheadless() {
    if ! which VBoxHeadless >/dev/null 2>&1; then
        print_error "VBoxHeadless not found. Please install VirtualBox."
        print_error "Download from: https://www.virtualbox.org/wiki/Downloads"
        exit 1
    fi
    
    if ! which VBoxManage >/dev/null 2>&1; then
        print_error "VBoxManage not found. Please install VirtualBox."
        exit 1
    fi
    
    print_status "Using VBoxHeadless $(VBoxManage --version) for headless VM operation"
}

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "VM Manager for Simple NFS Daemon"
    echo ""
    echo "Usage: $0 [command] [vm_name]"
    echo ""
    echo "Commands:"
    echo "  up [vm_name]     - Start a VM (headless mode)"
    echo "  down [vm_name]   - Stop a VM"
    echo "  destroy [vm_name] - Destroy a VM"
    echo "  status [vm_name] - Show VM status"
    echo "  ssh [vm_name]    - SSH into a VM"
    echo "  build [vm_name]  - Build project on VM"
    echo "  test [vm_name]   - Run tests on VM"
    echo "  list             - List all available VMs"
    echo "  matrix           - Test all VMs"
    echo ""
    echo "Available VMs: ${AVAILABLE_VMS[*]}"
    echo ""
    echo "Note: VMs run in headless mode (no GUI) using VBoxHeadless"
    echo ""
    echo "Examples:"
    echo "  $0 up ubuntu_dev"
    echo "  $0 ssh centos_dev"
    echo "  $0 matrix"
}

# Function to validate VM name
validate_vm() {
    local vm_name="$1"
    if [[ ! " ${AVAILABLE_VMS[@]} " =~ " ${vm_name} " ]]; then
        print_error "Invalid VM name: $vm_name"
        print_error "Available VMs: ${AVAILABLE_VMS[*]}"
        exit 1
    fi
}

# Function to get VM directory
get_vm_dir() {
    local vm_name="$1"
    echo "virtuals/$vm_name"
}

# Function to start a VM
start_vm() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_status "Starting $vm_name VM in headless mode..."
    check_vboxheadless
    cd "$vm_dir"
    vagrant up
    cd - > /dev/null
    print_success "$vm_name VM started successfully (headless)"
}

# Function to stop a VM
stop_vm() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_status "Stopping $vm_name VM..."
    cd "$vm_dir"
    vagrant halt
    cd - > /dev/null
    print_success "$vm_name VM stopped successfully"
}

# Function to destroy a VM
destroy_vm() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_warning "Destroying $vm_name VM (this will delete all data)..."
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cd "$vm_dir"
        vagrant destroy -f
        cd - > /dev/null
        print_success "$vm_name VM destroyed successfully"
    else
        print_status "Operation cancelled"
    fi
}

# Function to show VM status
show_status() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_status "Status of $vm_name VM:"
    cd "$vm_dir"
    vagrant status
    cd - > /dev/null
}

# Function to SSH into VM
ssh_vm() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_status "Connecting to $vm_name VM..."
    cd "$vm_dir"
    vagrant ssh
    cd - > /dev/null
}

# Function to build on VM
build_vm() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_status "Building project on $vm_name VM..."
    cd "$vm_dir"
    vagrant ssh -c "cd /opt/simple-nfsd && sudo -u nfsdev ./build.sh"
    cd - > /dev/null
    print_success "Build completed on $vm_name VM"
}

# Function to test on VM
test_vm() {
    local vm_name="$1"
    local vm_dir=$(get_vm_dir "$vm_name")
    
    print_status "Running tests on $vm_name VM..."
    cd "$vm_dir"
    vagrant ssh -c "cd /opt/simple-nfsd/build && sudo -u nfsdev make test"
    cd - > /dev/null
    print_success "Tests completed on $vm_name VM"
}

# Function to list VMs
list_vms() {
    print_status "Available VMs:"
    for vm in "${AVAILABLE_VMS[@]}"; do
        local vm_dir=$(get_vm_dir "$vm")
        if [ -d "$vm_dir" ]; then
            cd "$vm_dir"
            local status=$(vagrant status --machine-readable | grep ",state," | cut -d',' -f4)
            cd - > /dev/null
            echo "  - $vm ($status)"
        else
            echo "  - $vm (not initialized)"
        fi
    done
}

# Function to test all VMs
test_matrix() {
    print_status "Running test matrix on all VMs..."
    for vm in "${AVAILABLE_VMS[@]}"; do
        echo ""
        print_status "Testing $vm..."
        if test_vm "$vm"; then
            print_success "$vm tests passed"
        else
            print_error "$vm tests failed"
        fi
    done
}

# Main script logic
case "${1:-}" in
    "up")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'up' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        start_vm "$2"
        ;;
    "down")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'down' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        stop_vm "$2"
        ;;
    "destroy")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'destroy' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        destroy_vm "$2"
        ;;
    "status")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'status' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        show_status "$2"
        ;;
    "ssh")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'ssh' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        ssh_vm "$2"
        ;;
    "build")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'build' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        build_vm "$2"
        ;;
    "test")
        if [ -z "${2:-}" ]; then
            print_error "VM name required for 'test' command"
            show_usage
            exit 1
        fi
        validate_vm "$2"
        test_vm "$2"
        ;;
    "list")
        list_vms
        ;;
    "matrix")
        test_matrix
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
